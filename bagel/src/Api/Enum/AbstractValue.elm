-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.AbstractValue exposing (..)

import Json.Decode as Decode exposing (Decoder)


type AbstractValue
    = Bottom
    | Top
    | Positive
    | Negative
    | Zero


list : List AbstractValue
list =
    [ Bottom, Top, Positive, Negative, Zero ]


decoder : Decoder AbstractValue
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "BOTTOM" ->
                        Decode.succeed Bottom

                    "TOP" ->
                        Decode.succeed Top

                    "POSITIVE" ->
                        Decode.succeed Positive

                    "NEGATIVE" ->
                        Decode.succeed Negative

                    "ZERO" ->
                        Decode.succeed Zero

                    _ ->
                        Decode.fail ("Invalid AbstractValue type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : AbstractValue -> String
toString enum____ =
    case enum____ of
        Bottom ->
            "BOTTOM"

        Top ->
            "TOP"

        Positive ->
            "POSITIVE"

        Negative ->
            "NEGATIVE"

        Zero ->
            "ZERO"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe AbstractValue
fromString enumString____ =
    case enumString____ of
        "BOTTOM" ->
            Just Bottom

        "TOP" ->
            Just Top

        "POSITIVE" ->
            Just Positive

        "NEGATIVE" ->
            Just Negative

        "ZERO" ->
            Just Zero

        _ ->
            Nothing
