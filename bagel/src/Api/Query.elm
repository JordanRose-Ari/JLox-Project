-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias TokensRequiredArguments =
    { code : String }


tokens :
    TokensRequiredArguments
    -> SelectionSet decodesTo Api.Object.Token
    -> SelectionSet (List decodesTo) RootQuery
tokens requiredArgs____ object____ =
    Object.selectionForCompositeField "tokens" [ Argument.required "code" requiredArgs____.code Encode.string ] object____ (Basics.identity >> Decode.list)


type alias ParseOptionalArguments =
    { id : OptionalArgument Int }


type alias ParseRequiredArguments =
    { code : String }


parse :
    (ParseOptionalArguments -> ParseOptionalArguments)
    -> ParseRequiredArguments
    -> SelectionSet decodesTo Api.Interface.Expr
    -> SelectionSet (Maybe decodesTo) RootQuery
parse fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "parse" (optionalArgs____ ++ [ Argument.required "code" requiredArgs____.code Encode.string ]) object____ (Basics.identity >> Decode.nullable)


type alias RunOptionalArguments =
    { input : OptionalArgument String }


type alias RunRequiredArguments =
    { code : String }


run :
    (RunOptionalArguments -> RunOptionalArguments)
    -> RunRequiredArguments
    -> SelectionSet String RootQuery
run fillInOptionals____ requiredArgs____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { input = Absent }

        optionalArgs____ =
            [ Argument.optional "input" filledInOptionals____.input Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "String" "run" (optionalArgs____ ++ [ Argument.required "code" requiredArgs____.code Encode.string ]) Decode.string


type alias SignRequiredArguments =
    { code : String }


sign :
    SignRequiredArguments
    -> SelectionSet String RootQuery
sign requiredArgs____ =
    Object.selectionForField "String" "sign" [ Argument.required "code" requiredArgs____.code Encode.string ] Decode.string
